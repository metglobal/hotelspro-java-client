/*
 * Hotelspro Api Client
 * Hotelspro Api Client
 *
 * OpenAPI spec version: 2.0.0
 * Contact: clientintegration@hotelspro.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package hotelspro_client.api;

import hotelspro_client.ApiCallback;
import hotelspro_client.ApiClient;
import hotelspro_client.ApiException;
import hotelspro_client.ApiResponse;
import hotelspro_client.Configuration;
import hotelspro_client.Pair;
import hotelspro_client.ProgressRequestBody;
import hotelspro_client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import hotelspro_client.model.AvailabilityResponse;
import hotelspro_client.model.BookResponse;
import hotelspro_client.model.BookingListResponse;
import hotelspro_client.model.CancelResponse;
import hotelspro_client.model.Error;
import hotelspro_client.model.HotelAvailabilityResponse;
import hotelspro_client.model.ProvisionResponse;
import hotelspro_client.model.SearchResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DefaultApi {
    private ApiClient apiClient;

    public DefaultApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DefaultApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for availabilityProductCodeGet
     * @param productCode product code that returned in Search(or Hotel Availability) Response (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call availabilityProductCodeGetCall(String productCode, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/availability/{product_code}"
            .replaceAll("\\{" + "product_code" + "\\}", apiClient.escapeString(productCode.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call availabilityProductCodeGetValidateBeforeCall(String productCode, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'productCode' is set
        if (productCode == null) {
            throw new ApiException("Missing the required parameter 'productCode' when calling availabilityProductCodeGet(Async)");
        }
        
        
        com.squareup.okhttp.Call call = availabilityProductCodeGetCall(productCode, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Availability with Product Code
     * Check Availability of Selected Product
     * @param productCode product code that returned in Search(or Hotel Availability) Response (required)
     * @return AvailabilityResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AvailabilityResponse availabilityProductCodeGet(String productCode) throws ApiException {
        ApiResponse<AvailabilityResponse> resp = availabilityProductCodeGetWithHttpInfo(productCode);
        return resp.getData();
    }

    /**
     * Availability with Product Code
     * Check Availability of Selected Product
     * @param productCode product code that returned in Search(or Hotel Availability) Response (required)
     * @return ApiResponse&lt;AvailabilityResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AvailabilityResponse> availabilityProductCodeGetWithHttpInfo(String productCode) throws ApiException {
        com.squareup.okhttp.Call call = availabilityProductCodeGetValidateBeforeCall(productCode, null, null);
        Type localVarReturnType = new TypeToken<AvailabilityResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Availability with Product Code (asynchronously)
     * Check Availability of Selected Product
     * @param productCode product code that returned in Search(or Hotel Availability) Response (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call availabilityProductCodeGetAsync(String productCode, final ApiCallback<AvailabilityResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = availabilityProductCodeGetValidateBeforeCall(productCode, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AvailabilityResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for bookProvisionCodePost
     * @param name A person&#39;s name. (required)
     * @param provisionCode  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call bookProvisionCodePostCall(List<String> name, String provisionCode, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/book/{provision_code}"
            .replaceAll("\\{" + "provision_code" + "\\}", apiClient.escapeString(provisionCode.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (name != null)
        localVarFormParams.put("name", name);

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call bookProvisionCodePostValidateBeforeCall(List<String> name, String provisionCode, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling bookProvisionCodePost(Async)");
        }
        
        // verify the required parameter 'provisionCode' is set
        if (provisionCode == null) {
            throw new ApiException("Missing the required parameter 'provisionCode' when calling bookProvisionCodePost(Async)");
        }
        
        
        com.squareup.okhttp.Call call = bookProvisionCodePostCall(name, provisionCode, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Book with Provision Code
     * Returns Book Response
     * @param name A person&#39;s name. (required)
     * @param provisionCode  (required)
     * @return BookResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BookResponse bookProvisionCodePost(List<String> name, String provisionCode) throws ApiException {
        ApiResponse<BookResponse> resp = bookProvisionCodePostWithHttpInfo(name, provisionCode);
        return resp.getData();
    }

    /**
     * Book with Provision Code
     * Returns Book Response
     * @param name A person&#39;s name. (required)
     * @param provisionCode  (required)
     * @return ApiResponse&lt;BookResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BookResponse> bookProvisionCodePostWithHttpInfo(List<String> name, String provisionCode) throws ApiException {
        com.squareup.okhttp.Call call = bookProvisionCodePostValidateBeforeCall(name, provisionCode, null, null);
        Type localVarReturnType = new TypeToken<BookResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Book with Provision Code (asynchronously)
     * Returns Book Response
     * @param name A person&#39;s name. (required)
     * @param provisionCode  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call bookProvisionCodePostAsync(List<String> name, String provisionCode, final ApiCallback<BookResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = bookProvisionCodePostValidateBeforeCall(name, provisionCode, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BookResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for bookingsBookingCodeGet
     * @param bookingCode This is the code that taken from the response of bookings request (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call bookingsBookingCodeGetCall(String bookingCode, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/bookings/{booking_code}"
            .replaceAll("\\{" + "booking_code" + "\\}", apiClient.escapeString(bookingCode.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call bookingsBookingCodeGetValidateBeforeCall(String bookingCode, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'bookingCode' is set
        if (bookingCode == null) {
            throw new ApiException("Missing the required parameter 'bookingCode' when calling bookingsBookingCodeGet(Async)");
        }
        
        
        com.squareup.okhttp.Call call = bookingsBookingCodeGetCall(bookingCode, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get Booking Detail
     * Returns past booking(s) data.
     * @param bookingCode This is the code that taken from the response of bookings request (required)
     * @return BookResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BookResponse bookingsBookingCodeGet(String bookingCode) throws ApiException {
        ApiResponse<BookResponse> resp = bookingsBookingCodeGetWithHttpInfo(bookingCode);
        return resp.getData();
    }

    /**
     * Get Booking Detail
     * Returns past booking(s) data.
     * @param bookingCode This is the code that taken from the response of bookings request (required)
     * @return ApiResponse&lt;BookResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BookResponse> bookingsBookingCodeGetWithHttpInfo(String bookingCode) throws ApiException {
        com.squareup.okhttp.Call call = bookingsBookingCodeGetValidateBeforeCall(bookingCode, null, null);
        Type localVarReturnType = new TypeToken<BookResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Booking Detail (asynchronously)
     * Returns past booking(s) data.
     * @param bookingCode This is the code that taken from the response of bookings request (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call bookingsBookingCodeGetAsync(String bookingCode, final ApiCallback<BookResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = bookingsBookingCodeGetValidateBeforeCall(bookingCode, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BookResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for bookingsGet
     * @param fromDate This is the booking date for filtering the bookings from the from_date(YYYY-MM-DD). (optional)
     * @param toDate This is the booking date for filtering the bookings until the to_date(YYYY-MM-DD). (optional)
     * @param format Only JSON supported (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call bookingsGetCall(String fromDate, String toDate, String format, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/bookings/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (fromDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "from_date", fromDate));
        if (toDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "to_date", toDate));
        if (format != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "format", format));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call bookingsGetValidateBeforeCall(String fromDate, String toDate, String format, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        
        com.squareup.okhttp.Call call = bookingsGetCall(fromDate, toDate, format, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get Booking List
     * Returns past booking(s) data.
     * @param fromDate This is the booking date for filtering the bookings from the from_date(YYYY-MM-DD). (optional)
     * @param toDate This is the booking date for filtering the bookings until the to_date(YYYY-MM-DD). (optional)
     * @param format Only JSON supported (optional)
     * @return BookingListResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BookingListResponse bookingsGet(String fromDate, String toDate, String format) throws ApiException {
        ApiResponse<BookingListResponse> resp = bookingsGetWithHttpInfo(fromDate, toDate, format);
        return resp.getData();
    }

    /**
     * Get Booking List
     * Returns past booking(s) data.
     * @param fromDate This is the booking date for filtering the bookings from the from_date(YYYY-MM-DD). (optional)
     * @param toDate This is the booking date for filtering the bookings until the to_date(YYYY-MM-DD). (optional)
     * @param format Only JSON supported (optional)
     * @return ApiResponse&lt;BookingListResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BookingListResponse> bookingsGetWithHttpInfo(String fromDate, String toDate, String format) throws ApiException {
        com.squareup.okhttp.Call call = bookingsGetValidateBeforeCall(fromDate, toDate, format, null, null);
        Type localVarReturnType = new TypeToken<BookingListResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Booking List (asynchronously)
     * Returns past booking(s) data.
     * @param fromDate This is the booking date for filtering the bookings from the from_date(YYYY-MM-DD). (optional)
     * @param toDate This is the booking date for filtering the bookings until the to_date(YYYY-MM-DD). (optional)
     * @param format Only JSON supported (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call bookingsGetAsync(String fromDate, String toDate, String format, final ApiCallback<BookingListResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = bookingsGetValidateBeforeCall(fromDate, toDate, format, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BookingListResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cancelBookingCodePost
     * @param bookingCode Booking Code that returned in Book Response (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cancelBookingCodePostCall(String bookingCode, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cancel/{booking_code}"
            .replaceAll("\\{" + "booking_code" + "\\}", apiClient.escapeString(bookingCode.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cancelBookingCodePostValidateBeforeCall(String bookingCode, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'bookingCode' is set
        if (bookingCode == null) {
            throw new ApiException("Missing the required parameter 'bookingCode' when calling cancelBookingCodePost(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cancelBookingCodePostCall(bookingCode, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Cancel Booking with Booking Code
     * Cancel the Booking
     * @param bookingCode Booking Code that returned in Book Response (required)
     * @return CancelResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CancelResponse cancelBookingCodePost(String bookingCode) throws ApiException {
        ApiResponse<CancelResponse> resp = cancelBookingCodePostWithHttpInfo(bookingCode);
        return resp.getData();
    }

    /**
     * Cancel Booking with Booking Code
     * Cancel the Booking
     * @param bookingCode Booking Code that returned in Book Response (required)
     * @return ApiResponse&lt;CancelResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CancelResponse> cancelBookingCodePostWithHttpInfo(String bookingCode) throws ApiException {
        com.squareup.okhttp.Call call = cancelBookingCodePostValidateBeforeCall(bookingCode, null, null);
        Type localVarReturnType = new TypeToken<CancelResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Cancel Booking with Booking Code (asynchronously)
     * Cancel the Booking
     * @param bookingCode Booking Code that returned in Book Response (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cancelBookingCodePostAsync(String bookingCode, final ApiCallback<CancelResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cancelBookingCodePostValidateBeforeCall(bookingCode, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CancelResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for hotelAvailabilityGet
     * @param searchCode search code that returned in search response (required)
     * @param hotelCode requested hotel code (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call hotelAvailabilityGetCall(String searchCode, String hotelCode, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/hotel-availability/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (searchCode != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "search_code", searchCode));
        if (hotelCode != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "hotel_code", hotelCode));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call hotelAvailabilityGetValidateBeforeCall(String searchCode, String hotelCode, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'searchCode' is set
        if (searchCode == null) {
            throw new ApiException("Missing the required parameter 'searchCode' when calling hotelAvailabilityGet(Async)");
        }
        
        // verify the required parameter 'hotelCode' is set
        if (hotelCode == null) {
            throw new ApiException("Missing the required parameter 'hotelCode' when calling hotelAvailabilityGet(Async)");
        }
        
        
        com.squareup.okhttp.Call call = hotelAvailabilityGetCall(searchCode, hotelCode, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Hotel Availability with Hotel Code and Search Code
     * Check Availability of Selected Hotel
     * @param searchCode search code that returned in search response (required)
     * @param hotelCode requested hotel code (required)
     * @return HotelAvailabilityResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public HotelAvailabilityResponse hotelAvailabilityGet(String searchCode, String hotelCode) throws ApiException {
        ApiResponse<HotelAvailabilityResponse> resp = hotelAvailabilityGetWithHttpInfo(searchCode, hotelCode);
        return resp.getData();
    }

    /**
     * Hotel Availability with Hotel Code and Search Code
     * Check Availability of Selected Hotel
     * @param searchCode search code that returned in search response (required)
     * @param hotelCode requested hotel code (required)
     * @return ApiResponse&lt;HotelAvailabilityResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<HotelAvailabilityResponse> hotelAvailabilityGetWithHttpInfo(String searchCode, String hotelCode) throws ApiException {
        com.squareup.okhttp.Call call = hotelAvailabilityGetValidateBeforeCall(searchCode, hotelCode, null, null);
        Type localVarReturnType = new TypeToken<HotelAvailabilityResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Hotel Availability with Hotel Code and Search Code (asynchronously)
     * Check Availability of Selected Hotel
     * @param searchCode search code that returned in search response (required)
     * @param hotelCode requested hotel code (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call hotelAvailabilityGetAsync(String searchCode, String hotelCode, final ApiCallback<HotelAvailabilityResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = hotelAvailabilityGetValidateBeforeCall(searchCode, hotelCode, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<HotelAvailabilityResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for provisionProductCodePost
     * @param productCode product code that returned in Search(or Hotel Availability) Response (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call provisionProductCodePostCall(String productCode, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/provision/{product_code}"
            .replaceAll("\\{" + "product_code" + "\\}", apiClient.escapeString(productCode.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call provisionProductCodePostValidateBeforeCall(String productCode, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'productCode' is set
        if (productCode == null) {
            throw new ApiException("Missing the required parameter 'productCode' when calling provisionProductCodePost(Async)");
        }
        
        
        com.squareup.okhttp.Call call = provisionProductCodePostCall(productCode, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Provision with Product Code
     * Provision of Selected Product
     * @param productCode product code that returned in Search(or Hotel Availability) Response (required)
     * @return ProvisionResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ProvisionResponse provisionProductCodePost(String productCode) throws ApiException {
        ApiResponse<ProvisionResponse> resp = provisionProductCodePostWithHttpInfo(productCode);
        return resp.getData();
    }

    /**
     * Provision with Product Code
     * Provision of Selected Product
     * @param productCode product code that returned in Search(or Hotel Availability) Response (required)
     * @return ApiResponse&lt;ProvisionResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ProvisionResponse> provisionProductCodePostWithHttpInfo(String productCode) throws ApiException {
        com.squareup.okhttp.Call call = provisionProductCodePostValidateBeforeCall(productCode, null, null);
        Type localVarReturnType = new TypeToken<ProvisionResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Provision with Product Code (asynchronously)
     * Provision of Selected Product
     * @param productCode product code that returned in Search(or Hotel Availability) Response (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call provisionProductCodePostAsync(String productCode, final ApiCallback<ProvisionResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = provisionProductCodePostValidateBeforeCall(productCode, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ProvisionResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for searchPost
     * @param pax Number of pax (required)
     * @param checkin Checkin (required)
     * @param checkout Checkout (required)
     * @param clientNationality Client Nationality (required)
     * @param currency Currency (Supported Currencies USD, EUR, GBP, TRY) (required)
     * @param hotelCode Requested Hotel Code (optional)
     * @param destinationCode Requested Destination Code (optional)
     * @param lat Requested Latitude Code(lat, lon and radius should be given together) (optional)
     * @param lon Requested Longitude Code(lat, lon and radius should be given together) (optional)
     * @param radius Requested Radius Code(lat, lon and radius should be given together) (optional)
     * @param maxProduct Max Product (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call searchPostCall(List<String> pax, String checkin, String checkout, String clientNationality, String currency, String hotelCode, String destinationCode, String lat, String lon, String radius, Integer maxProduct, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/search/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (pax != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("multi", "pax", pax));
        if (checkin != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "checkin", checkin));
        if (checkout != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "checkout", checkout));
        if (clientNationality != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "client_nationality", clientNationality));
        if (currency != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "currency", currency));
        if (destinationCode != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "destination_code", destinationCode));
        if (lat != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "lat", lat));
        if (lon != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "lon", lon));
        if (radius != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "radius", radius));
        if (maxProduct != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "max_product", maxProduct));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (hotelCode != null)
        localVarFormParams.put("hotel_code", hotelCode);

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call searchPostValidateBeforeCall(List<String> pax, String checkin, String checkout, String clientNationality, String currency, String hotelCode, String destinationCode, String lat, String lon, String radius, Integer maxProduct, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'pax' is set
        if (pax == null) {
            throw new ApiException("Missing the required parameter 'pax' when calling searchPost(Async)");
        }
        
        // verify the required parameter 'checkin' is set
        if (checkin == null) {
            throw new ApiException("Missing the required parameter 'checkin' when calling searchPost(Async)");
        }
        
        // verify the required parameter 'checkout' is set
        if (checkout == null) {
            throw new ApiException("Missing the required parameter 'checkout' when calling searchPost(Async)");
        }
        
        // verify the required parameter 'clientNationality' is set
        if (clientNationality == null) {
            throw new ApiException("Missing the required parameter 'clientNationality' when calling searchPost(Async)");
        }
        
        // verify the required parameter 'currency' is set
        if (currency == null) {
            throw new ApiException("Missing the required parameter 'currency' when calling searchPost(Async)");
        }
        
        
        com.squareup.okhttp.Call call = searchPostCall(pax, checkin, checkout, clientNationality, currency, hotelCode, destinationCode, lat, lon, radius, maxProduct, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Search with Hotel Code(Hotel Code List) or Destination Code or Geolocation
     * Returns list of products
     * @param pax Number of pax (required)
     * @param checkin Checkin (required)
     * @param checkout Checkout (required)
     * @param clientNationality Client Nationality (required)
     * @param currency Currency (Supported Currencies USD, EUR, GBP, TRY) (required)
     * @param hotelCode Requested Hotel Code (optional)
     * @param destinationCode Requested Destination Code (optional)
     * @param lat Requested Latitude Code(lat, lon and radius should be given together) (optional)
     * @param lon Requested Longitude Code(lat, lon and radius should be given together) (optional)
     * @param radius Requested Radius Code(lat, lon and radius should be given together) (optional)
     * @param maxProduct Max Product (optional)
     * @return SearchResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SearchResponse searchPost(List<String> pax, String checkin, String checkout, String clientNationality, String currency, String hotelCode, String destinationCode, String lat, String lon, String radius, Integer maxProduct) throws ApiException {
        ApiResponse<SearchResponse> resp = searchPostWithHttpInfo(pax, checkin, checkout, clientNationality, currency, hotelCode, destinationCode, lat, lon, radius, maxProduct);
        return resp.getData();
    }

    /**
     * Search with Hotel Code(Hotel Code List) or Destination Code or Geolocation
     * Returns list of products
     * @param pax Number of pax (required)
     * @param checkin Checkin (required)
     * @param checkout Checkout (required)
     * @param clientNationality Client Nationality (required)
     * @param currency Currency (Supported Currencies USD, EUR, GBP, TRY) (required)
     * @param hotelCode Requested Hotel Code (optional)
     * @param destinationCode Requested Destination Code (optional)
     * @param lat Requested Latitude Code(lat, lon and radius should be given together) (optional)
     * @param lon Requested Longitude Code(lat, lon and radius should be given together) (optional)
     * @param radius Requested Radius Code(lat, lon and radius should be given together) (optional)
     * @param maxProduct Max Product (optional)
     * @return ApiResponse&lt;SearchResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SearchResponse> searchPostWithHttpInfo(List<String> pax, String checkin, String checkout, String clientNationality, String currency, String hotelCode, String destinationCode, String lat, String lon, String radius, Integer maxProduct) throws ApiException {
        com.squareup.okhttp.Call call = searchPostValidateBeforeCall(pax, checkin, checkout, clientNationality, currency, hotelCode, destinationCode, lat, lon, radius, maxProduct, null, null);
        Type localVarReturnType = new TypeToken<SearchResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Search with Hotel Code(Hotel Code List) or Destination Code or Geolocation (asynchronously)
     * Returns list of products
     * @param pax Number of pax (required)
     * @param checkin Checkin (required)
     * @param checkout Checkout (required)
     * @param clientNationality Client Nationality (required)
     * @param currency Currency (Supported Currencies USD, EUR, GBP, TRY) (required)
     * @param hotelCode Requested Hotel Code (optional)
     * @param destinationCode Requested Destination Code (optional)
     * @param lat Requested Latitude Code(lat, lon and radius should be given together) (optional)
     * @param lon Requested Longitude Code(lat, lon and radius should be given together) (optional)
     * @param radius Requested Radius Code(lat, lon and radius should be given together) (optional)
     * @param maxProduct Max Product (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call searchPostAsync(List<String> pax, String checkin, String checkout, String clientNationality, String currency, String hotelCode, String destinationCode, String lat, String lon, String radius, Integer maxProduct, final ApiCallback<SearchResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = searchPostValidateBeforeCall(pax, checkin, checkout, clientNationality, currency, hotelCode, destinationCode, lat, lon, radius, maxProduct, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SearchResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
